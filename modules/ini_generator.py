import plistlib
import os
from argparse import ArgumentParser
# powered by laobamac，请遵循GPLv3开源协议
# 解析命令行参数
parser = ArgumentParser(description='Generate INI configuration from a config.plist file.')
parser.add_argument('configpath', help='Path to the config.plist file')
parser.add_argument('inipath', nargs='?', help='Path to the output INI file (default to the same directory as config.plist)', default='')
args = parser.parse_args()

# 读取 plist 文件
plist_path = args.configpath
ini_path = args.inipath if args.inipath else os.path.splitext(plist_path)[0] + '.ini'

# 读取 plist 数据
with open(plist_path, 'rb') as f:
    plist_data = plistlib.load(f)

# 准备 INI 文件内容
ini_content = "; Autogenerated INI configuration\n"
ini_content += "; Written by laobamac and open-sourced\n"
ini_content += "; Please follow the GPLv3 open-source protocol\n\n"

# 添加 Quirks 信息
for quirk_type, quirks_dict in {
    "ACPI": "ACPI.Quirks",
    "Booter": "Booter.Quirks",
    "Kernel": "Kernel.Quirks",
    "UEFI": "UEFI.Quirks"
}.items():
    ini_content += f"[{quirks_dict}]\n"
    for key, value in plist_data.get(quirk_type, {}).get("Quirks", {}).items():
        ini_content += f"{key}={str(value).lower()}\n"
    ini_content += "\n"

# 添加 Kexts 信息
ini_content += "[Kexts]\n"
kexts = plist_data.get("Kernel", {}).get("Add", [])
for kext in kexts:
    ini_content += f"{kext['BundlePath']}={kext.get('Enabled', False)}\n"

ini_content += "\n"

# 添加 SSDTs 信息
ini_content += "[SSDTs]\n"
ssdts = plist_data.get("ACPI", {}).get("Add", [])
for ssdt in ssdts:
    ini_content += f"{ssdt['Path']}={ssdt.get('Enabled', False)}\n"

ini_content += "\n"

# 添加 NVRAM boot-args 信息
nvram_boot_args = plist_data.get("NVRAM", {}).get("Add", {}).get("7C436110-AB2A-4BBB-A880-FE41995C9F82", {}).get("boot-args", "")
ini_content += "[NVRAM]\n"
ini_content += f"boot-args={nvram_boot_args}\n"
ini_content += "\n"

# 添加 PlatformInfo 信息
platform_info = plist_data.get("PlatformInfo", {})
ini_content += "[PlatformInfo]\n"
for key, value in platform_info.items():
    if isinstance(value, dict):
        for subkey, subvalue in value.items():
            ini_content += f"{subkey}={subvalue}\n"
    else:
        ini_content += f"{key}={value}\n"

# 写入 INI 文件
with open(ini_path, 'w') as f:
    f.write(ini_content)

print(f"INI configuration has been written to {ini_path}")
